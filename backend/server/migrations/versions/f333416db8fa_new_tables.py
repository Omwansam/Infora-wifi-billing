"""new tables

Revision ID: f333416db8fa
Revises: 5426d52a3c78
Create Date: 2025-08-26 15:05:48.652810

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'f333416db8fa'
down_revision = '5426d52a3c78'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if tables exist before creating them
    connection = op.get_bind()
    inspector = sa.inspect(connection)
    existing_tables = inspector.get_table_names()
    
    if 'eap_profiles' not in existing_tables:
        op.create_table('eap_profiles',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('eap_method', sa.String(length=20), nullable=False),
        sa.Column('ca_cert_path', sa.String(length=255), nullable=True),
        sa.Column('server_cert_path', sa.String(length=255), nullable=True),
        sa.Column('server_key_path', sa.String(length=255), nullable=True),
        sa.Column('client_cert_path', sa.String(length=255), nullable=True),
        sa.Column('client_key_path', sa.String(length=255), nullable=True),
        sa.Column('phase2_method', sa.String(length=20), nullable=True),
        sa.Column('inner_identity', sa.String(length=255), nullable=True),
        sa.Column('outer_identity', sa.String(length=255), nullable=True),
        sa.Column('config_blob', sa.Text(), nullable=True),
        sa.Column('notes', sa.Text(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
    
    if 'isps' not in existing_tables:
        op.create_table('isps',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('company_name', sa.String(length=200), nullable=False),
        sa.Column('email', sa.String(length=120), nullable=False),
        sa.Column('phone', sa.String(length=20), nullable=True),
        sa.Column('address', sa.Text(), nullable=True),
        sa.Column('website', sa.String(length=200), nullable=True),
        sa.Column('logo_url', sa.String(length=500), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('subscription_plan', sa.String(length=50), nullable=True),
        sa.Column('max_devices', sa.Integer(), nullable=True),
        sa.Column('max_customers', sa.Integer(), nullable=True),
        sa.Column('api_key', sa.String(length=100), nullable=False),
        sa.Column('radius_secret', sa.String(length=100), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('api_key'),
        sa.UniqueConstraint('email')
        )
    
    if 'ldap_servers' not in existing_tables:
        op.create_table('ldap_servers',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('host', sa.String(length=255), nullable=False),
        sa.Column('port', sa.Integer(), nullable=True),
        sa.Column('use_ssl', sa.Boolean(), nullable=True),
        sa.Column('use_tls', sa.Boolean(), nullable=True),
        sa.Column('bind_dn', sa.String(length=255), nullable=False),
        sa.Column('bind_password', sa.String(length=255), nullable=False),
        sa.Column('base_dn', sa.String(length=255), nullable=False),
        sa.Column('user_search_base', sa.String(length=255), nullable=True),
        sa.Column('user_search_filter', sa.String(length=255), nullable=True),
        sa.Column('group_search_base', sa.String(length=255), nullable=True),
        sa.Column('group_search_filter', sa.String(length=255), nullable=True),
        sa.Column('timeout', sa.Integer(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
    
    if 'radius_clients' not in existing_tables:
        op.create_table('radius_clients',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('host', sa.String(length=255), nullable=False),
        sa.Column('secret', sa.String(length=255), nullable=False),
        sa.Column('auth_port', sa.Integer(), nullable=True),
        sa.Column('acct_port', sa.Integer(), nullable=True),
        sa.Column('nas_type', sa.String(length=50), nullable=True),
        sa.Column('shortname', sa.String(length=50), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
    
    if 'snmp_devices' not in existing_tables:
        op.create_table('snmp_devices',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('host', sa.String(length=255), nullable=False),
        sa.Column('port', sa.Integer(), nullable=True),
        sa.Column('snmp_version', sa.String(length=10), nullable=True),
        sa.Column('community', sa.String(length=255), nullable=True),
        sa.Column('username', sa.String(length=100), nullable=True),
        sa.Column('auth_protocol', sa.String(length=20), nullable=True),
        sa.Column('auth_key', sa.String(length=255), nullable=True),
        sa.Column('priv_protocol', sa.String(length=20), nullable=True),
        sa.Column('priv_key', sa.String(length=255), nullable=True),
        sa.Column('context_name', sa.String(length=100), nullable=True),
        sa.Column('timeout', sa.Integer(), nullable=True),
        sa.Column('retries', sa.Integer(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('last_poll', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
    
    if 'vpn_configs' not in existing_tables:
        op.create_table('vpn_configs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('vpn_type', sa.String(length=20), nullable=False),
        sa.Column('config_blob', sa.Text(), nullable=False),
        sa.Column('server_public_key', sa.String(length=255), nullable=True),
        sa.Column('server_private_key', sa.String(length=255), nullable=True),
        sa.Column('server_endpoint', sa.String(length=255), nullable=True),
        sa.Column('server_port', sa.Integer(), nullable=True),
        sa.Column('allowed_ips', sa.String(length=255), nullable=True),
        sa.Column('dns_servers', sa.String(length=255), nullable=True),
        sa.Column('mtu', sa.Integer(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
    
    if 'radgroupcheck' not in existing_tables:
        op.create_table('radgroupcheck',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('groupname', sa.String(length=64), nullable=False),
        sa.Column('attribute', sa.String(length=64), nullable=False),
        sa.Column('op', sa.String(length=2), nullable=False),
        sa.Column('value', sa.String(length=253), nullable=False),
        sa.Column('isp_id', sa.Integer(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.ForeignKeyConstraint(['isp_id'], ['isps.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('radgroupcheck', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_radgroupcheck_groupname'), ['groupname'], unique=False)

    if 'radgroupreply' not in existing_tables:
        op.create_table('radgroupreply',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('groupname', sa.String(length=64), nullable=False),
        sa.Column('attribute', sa.String(length=64), nullable=False),
        sa.Column('op', sa.String(length=2), nullable=False),
        sa.Column('value', sa.String(length=253), nullable=False),
        sa.Column('isp_id', sa.Integer(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.ForeignKeyConstraint(['isp_id'], ['isps.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('radgroupreply', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_radgroupreply_groupname'), ['groupname'], unique=False)

    if 'snmp_poll_results' not in existing_tables:
        op.create_table('snmp_poll_results',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('snmp_device_id', sa.Integer(), nullable=False),
        sa.Column('oid', sa.String(length=255), nullable=False),
        sa.Column('value', sa.Text(), nullable=True),
        sa.Column('data_type', sa.String(length=20), nullable=True),
        sa.Column('poll_time', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('response_time', sa.Float(), nullable=True),
        sa.Column('status', sa.String(length=20), nullable=True),
        sa.Column('error_message', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['snmp_device_id'], ['snmp_devices.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    
    if 'vpn_clients' not in existing_tables:
        op.create_table('vpn_clients',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('vpn_config_id', sa.Integer(), nullable=False),
        sa.Column('client_public_key', sa.String(length=255), nullable=True),
        sa.Column('client_private_key', sa.String(length=255), nullable=True),
        sa.Column('client_ip', sa.String(length=50), nullable=True),
        sa.Column('config_blob', sa.Text(), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('last_connected', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.ForeignKeyConstraint(['vpn_config_id'], ['vpn_configs.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    
    if 'radacct' not in existing_tables:
        op.create_table('radacct',
        sa.Column('radacctid', sa.BigInteger(), nullable=False),
        sa.Column('acctsessionid', sa.String(length=64), nullable=False),
        sa.Column('acctuniqueid', sa.String(length=32), nullable=False),
        sa.Column('username', sa.String(length=64), nullable=False),
        sa.Column('groupname', sa.String(length=64), nullable=True),
        sa.Column('realm', sa.String(length=64), nullable=True),
        sa.Column('nasipaddress', sa.String(length=15), nullable=False),
        sa.Column('nasportid', sa.String(length=15), nullable=True),
        sa.Column('nasporttype', sa.String(length=32), nullable=True),
        sa.Column('acctstarttime', sa.DateTime(), nullable=True),
        sa.Column('acctupdatetime', sa.DateTime(), nullable=True),
        sa.Column('acctstoptime', sa.DateTime(), nullable=True),
        sa.Column('acctinterval', sa.Integer(), nullable=True),
        sa.Column('acctsessiontime', sa.Integer(), nullable=True),
        sa.Column('acctauthentic', sa.String(length=32), nullable=True),
        sa.Column('connectinfo_start', sa.String(length=50), nullable=True),
        sa.Column('connectinfo_stop', sa.String(length=50), nullable=True),
        sa.Column('acctinputoctets', sa.BigInteger(), nullable=True),
        sa.Column('acctoutputoctets', sa.BigInteger(), nullable=True),
        sa.Column('calledstationid', sa.String(length=50), nullable=True),
        sa.Column('callingstationid', sa.String(length=50), nullable=True),
        sa.Column('acctterminatecause', sa.String(length=32), nullable=True),
        sa.Column('servicetype', sa.String(length=32), nullable=True),
        sa.Column('framedprotocol', sa.String(length=32), nullable=True),
        sa.Column('framedipaddress', sa.String(length=15), nullable=True),
        sa.Column('framedipv6address', sa.String(length=45), nullable=True),
        sa.Column('framedipv6prefix', sa.String(length=45), nullable=True),
        sa.Column('framedinterfaceid', sa.String(length=44), nullable=True),
        sa.Column('delegatedipv6prefix', sa.String(length=45), nullable=True),
        sa.Column('isp_id', sa.Integer(), nullable=True),
        sa.Column('customer_id', sa.Integer(), nullable=True),
        sa.Column('mikrotik_device_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
        sa.ForeignKeyConstraint(['isp_id'], ['isps.id'], ),
        sa.ForeignKeyConstraint(['mikrotik_device_id'], ['mikrotik_devices.id'], ),
        sa.PrimaryKeyConstraint('radacctid')
        )
        with op.batch_alter_table('radacct', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_radacct_acctsessionid'), ['acctsessionid'], unique=False)
            batch_op.create_index(batch_op.f('ix_radacct_acctsessiontime'), ['acctsessiontime'], unique=False)
            batch_op.create_index(batch_op.f('ix_radacct_acctstarttime'), ['acctstarttime'], unique=False)
            batch_op.create_index(batch_op.f('ix_radacct_acctstoptime'), ['acctstoptime'], unique=False)
            batch_op.create_index(batch_op.f('ix_radacct_acctuniqueid'), ['acctuniqueid'], unique=False)
            batch_op.create_index(batch_op.f('ix_radacct_framedipaddress'), ['framedipaddress'], unique=False)
            batch_op.create_index(batch_op.f('ix_radacct_nasipaddress'), ['nasipaddress'], unique=False)
            batch_op.create_index(batch_op.f('ix_radacct_username'), ['username'], unique=False)

    if 'radcheck' not in existing_tables:
        op.create_table('radcheck',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=64), nullable=False),
        sa.Column('attribute', sa.String(length=64), nullable=False),
        sa.Column('op', sa.String(length=2), nullable=False),
        sa.Column('value', sa.String(length=253), nullable=False),
        sa.Column('isp_id', sa.Integer(), nullable=True),
        sa.Column('customer_id', sa.Integer(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
        sa.ForeignKeyConstraint(['isp_id'], ['isps.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('radcheck', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_radcheck_username'), ['username'], unique=False)

    if 'radreply' not in existing_tables:
        op.create_table('radreply',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=64), nullable=False),
        sa.Column('attribute', sa.String(length=64), nullable=False),
        sa.Column('op', sa.String(length=2), nullable=False),
        sa.Column('value', sa.String(length=253), nullable=False),
        sa.Column('isp_id', sa.Integer(), nullable=True),
        sa.Column('customer_id', sa.Integer(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
        sa.ForeignKeyConstraint(['isp_id'], ['isps.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('radreply', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_radreply_username'), ['username'], unique=False)

    if 'radusergroup' not in existing_tables:
        op.create_table('radusergroup',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=64), nullable=False),
        sa.Column('groupname', sa.String(length=64), nullable=False),
        sa.Column('priority', sa.Integer(), nullable=False),
        sa.Column('isp_id', sa.Integer(), nullable=True),
        sa.Column('customer_id', sa.Integer(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
        sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
        sa.ForeignKeyConstraint(['isp_id'], ['isps.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
        with op.batch_alter_table('radusergroup', schema=None) as batch_op:
            batch_op.create_index(batch_op.f('ix_radusergroup_groupname'), ['groupname'], unique=False)
            batch_op.create_index(batch_op.f('ix_radusergroup_username'), ['username'], unique=False)

    with op.batch_alter_table('customers', schema=None) as batch_op:
        batch_op.add_column(sa.Column('isp_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key('fk_customers_isp_id', 'isps', ['isp_id'], ['id'])

    with op.batch_alter_table('invoices', schema=None) as batch_op:
        batch_op.add_column(sa.Column('isp_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key('fk_invoices_isp_id', 'isps', ['isp_id'], ['id'])

    with op.batch_alter_table('mikrotik_devices', schema=None) as batch_op:
        batch_op.add_column(sa.Column('isp_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key('fk_mikrotik_devices_isp_id', 'isps', ['isp_id'], ['id'])

    with op.batch_alter_table('network_zones', schema=None) as batch_op:
        batch_op.add_column(sa.Column('isp_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('name', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('description', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('network_range', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('location', sa.String(length=200), nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.create_foreign_key('fk_network_zones_isp_id', 'isps', ['isp_id'], ['id'])
        batch_op.drop_column('zone_description')
        batch_op.drop_column('zone_name')

    with op.batch_alter_table('radius_sessions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('isp_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('ip_address', sa.String(length=45), nullable=True))
        batch_op.add_column(sa.Column('mac_address', sa.String(length=17), nullable=True))
        batch_op.add_column(sa.Column('session_start', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True))
        batch_op.add_column(sa.Column('session_end', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('bytes_in', sa.BigInteger(), nullable=True))
        batch_op.add_column(sa.Column('bytes_out', sa.BigInteger(), nullable=True))
        batch_op.add_column(sa.Column('packets_in', sa.BigInteger(), nullable=True))
        batch_op.add_column(sa.Column('packets_out', sa.BigInteger(), nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
        batch_op.alter_column('customer_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('mikrotik_device_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('session_id',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               existing_nullable=False)
        batch_op.alter_column('username',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               existing_nullable=False)
        batch_op.create_unique_constraint('uq_radius_sessions_session_id', ['session_id'])
        batch_op.create_foreign_key('fk_radius_sessions_isp_id', 'isps', ['isp_id'], ['id'])
        batch_op.drop_column('acct_start_time')
        batch_op.drop_column('acct_terminate_cause')
        batch_op.drop_column('acct_session_time')
        batch_op.drop_column('acct_output_octets')
        batch_op.drop_column('calling_station_id')
        batch_op.drop_column('acct_input_packets')
        batch_op.drop_column('called_station_id')
        batch_op.drop_column('nas_ip_address')
        batch_op.drop_column('acct_stop_time')
        batch_op.drop_column('framed_ip_address')
        batch_op.drop_column('acct_status_type')
        batch_op.drop_column('acct_input_octets')
        batch_op.drop_column('acct_output_packets')

    with op.batch_alter_table('service_plans', schema=None) as batch_op:
        batch_op.add_column(sa.Column('isp_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key('fk_service_plans_isp_id', 'isps', ['isp_id'], ['id'])

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('isp_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key('fk_users_isp_id', 'isps', ['isp_id'], ['id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint('fk_users_isp_id', type_='foreignkey')
        batch_op.drop_column('isp_id')

    with op.batch_alter_table('service_plans', schema=None) as batch_op:
        batch_op.drop_constraint('fk_service_plans_isp_id', type_='foreignkey')
        batch_op.drop_column('isp_id')

    with op.batch_alter_table('radius_sessions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('acct_output_packets', sa.BIGINT(), nullable=True))
        batch_op.add_column(sa.Column('acct_input_octets', sa.BIGINT(), nullable=True))
        batch_op.add_column(sa.Column('acct_status_type', sa.VARCHAR(length=50), nullable=False))
        batch_op.add_column(sa.Column('framed_ip_address', sa.VARCHAR(length=50), nullable=False))
        batch_op.add_column(sa.Column('acct_stop_time', sa.DATETIME(), nullable=False))
        batch_op.add_column(sa.Column('nas_ip_address', sa.VARCHAR(length=50), nullable=False))
        batch_op.add_column(sa.Column('called_station_id', sa.VARCHAR(length=50), nullable=False))
        batch_op.add_column(sa.Column('acct_input_packets', sa.BIGINT(), nullable=True))
        batch_op.add_column(sa.Column('calling_station_id', sa.VARCHAR(length=50), nullable=False))
        batch_op.add_column(sa.Column('acct_output_octets', sa.BIGINT(), nullable=True))
        batch_op.add_column(sa.Column('acct_session_time', sa.INTEGER(), nullable=False))
        batch_op.add_column(sa.Column('acct_terminate_cause', sa.VARCHAR(length=50), nullable=False))
        batch_op.add_column(sa.Column('acct_start_time', sa.DATETIME(), nullable=False))
        batch_op.drop_constraint('fk_radius_sessions_isp_id', type_='foreignkey')
        batch_op.drop_constraint('uq_radius_sessions_session_id', type_='unique')
        batch_op.alter_column('username',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.alter_column('session_id',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
        batch_op.alter_column('mikrotik_device_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.alter_column('customer_id',
               existing_type=sa.INTEGER(),
               nullable=True)
        batch_op.drop_column('is_active')
        batch_op.drop_column('packets_out')
        batch_op.drop_column('packets_in')
        batch_op.drop_column('bytes_out')
        batch_op.drop_column('bytes_in')
        batch_op.drop_column('session_end')
        batch_op.drop_column('session_start')
        batch_op.drop_column('mac_address')
        batch_op.drop_column('ip_address')
        batch_op.drop_column('isp_id')

    with op.batch_alter_table('network_zones', schema=None) as batch_op:
        batch_op.add_column(sa.Column('zone_name', sa.VARCHAR(length=50), nullable=False))
        batch_op.add_column(sa.Column('zone_description', sa.VARCHAR(length=255), nullable=True))
        batch_op.drop_constraint('fk_network_zones_isp_id', type_='foreignkey')
        batch_op.drop_column('is_active')
        batch_op.drop_column('location')
        batch_op.drop_column('network_range')
        batch_op.drop_column('description')
        batch_op.drop_column('name')
        batch_op.drop_column('isp_id')

    with op.batch_alter_table('mikrotik_devices', schema=None) as batch_op:
        batch_op.drop_constraint('fk_mikrotik_devices_isp_id', type_='foreignkey')
        batch_op.drop_column('isp_id')

    with op.batch_alter_table('invoices', schema=None) as batch_op:
        batch_op.drop_constraint('fk_invoices_isp_id', type_='foreignkey')
        batch_op.drop_column('isp_id')

    with op.batch_alter_table('customers', schema=None) as batch_op:
        batch_op.drop_constraint('fk_customers_isp_id', type_='foreignkey')
        batch_op.drop_column('isp_id')

    with op.batch_alter_table('radusergroup', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_radusergroup_username'))
        batch_op.drop_index(batch_op.f('ix_radusergroup_groupname'))

    op.drop_table('radusergroup')
    with op.batch_alter_table('radreply', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_radreply_username'))

    op.drop_table('radreply')
    with op.batch_alter_table('radcheck', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_radcheck_username'))

    op.drop_table('radcheck')
    with op.batch_alter_table('radacct', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_radacct_username'))
        batch_op.drop_index(batch_op.f('ix_radacct_nasipaddress'))
        batch_op.drop_index(batch_op.f('ix_radacct_framedipaddress'))
        batch_op.drop_index(batch_op.f('ix_radacct_acctuniqueid'))
        batch_op.drop_index(batch_op.f('ix_radacct_acctstoptime'))
        batch_op.drop_index(batch_op.f('ix_radacct_acctstarttime'))
        batch_op.drop_index(batch_op.f('ix_radacct_acctsessiontime'))
        batch_op.drop_index(batch_op.f('ix_radacct_acctsessionid'))

    op.drop_table('radacct')
    op.drop_table('vpn_clients')
    op.drop_table('snmp_poll_results')
    with op.batch_alter_table('radgroupreply', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_radgroupreply_groupname'))

    op.drop_table('radgroupreply')
    with op.batch_alter_table('radgroupcheck', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_radgroupcheck_groupname'))

    op.drop_table('radgroupcheck')
    op.drop_table('vpn_configs')
    op.drop_table('snmp_devices')
    op.drop_table('radius_clients')
    op.drop_table('ldap_servers')
    op.drop_table('isps')
    op.drop_table('eap_profiles')
    # ### end Alembic commands ###
